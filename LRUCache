class LRUCache {
    
    int capacity;
    Map<Integer,Node> map=new HashMap<>();
    Node head=new Node(0,0),tail=new Node(0,0);

    public LRUCache(int capacity) {
        this.capacity=capacity;
        head.next=tail;
        tail.prev=head;    
    }
    
    public int get(int key) {
        if(map.containsKey(key)){
            Node data=map.get(key);
            //move data to top
            remove(data);
            insert(data);
            return data.value;
        }
        return -1;
    }
    
    public void put(int key, int value) {
//         Node node=cacheMap.get(key);
//         if(node==null){
//             Node new_node=new Node(key,value);
//             if(cacheMap.size()>=this.capacity){
//                 // remove the last node in the doubly linked list
//                 cacheMap.remove(tail.preNode.key);
//                 remove(tail.preNode);
//                 insert(new_node);
//                 cacheMap.put(key,new_node);
//             }else{
//                 insert(new Node(key,value));
//                 cacheMap.put(key,new_node);
//             }

//         }else{
//             remove(node);
//             node.value=value;
//             insert(node);
//         }
        if(map.containsKey(key)){
            remove(map.get(key));
        }
        if(capacity==map.size()){
            remove(tail.prev);
        }
        insert(new Node(key,value));
        
    }
    void insert(Node node){
        map.put(node.key,node);
        Node headNext=head.next;
        headNext.prev=node;
        head.next=node;
        node.prev=head;
        node.next=headNext;
        // next_node.preNode=node;
        // this.head.nextNode=node;
        // node.preNode=this.head;
        // node.nextNode=next_node;
    }
    // remove node from doubly linked list
    void remove(Node node){
        // map.remove(node.key);
        // Node next_node=node.nextNode;
        // Node pre_node=node.preNode;
        // pre_node.nextNode=next_node;
        // next_node.preNode=pre_node;
        map.remove(node.key);
        node.prev.next=node.next;
        node.next.prev=node.prev;
    }
    class Node {
        public Node(int key, int value){
            this.key=key;
            this.value=value;
        }
        int key;
        int value;
        Node prev;
        Node next;    
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
