class Solution {
    public List<List<Integer>> permute(int[] nums) {
        int len=nums.length;
        List<List<Integer>> res=new ArrayList<>();
        if(len==0){
            return res;
        }
        Deque<Integer> path=new ArrayDeque<>();
        boolean[] used=new boolean[len];
        dfs(res,len,0,path,used,nums);
        return res;
    }
    public void dfs(List<List<Integer>> res,int len,int depth,Deque<Integer> path,boolean[] used,int[] nums){
        if(depth==len){
            res.add(new ArrayList<>(path));
            return;
        }
        for(int i =0;i<len;i++){
            if(used[i]){
                continue;
            }
            path.add(nums[i]);
            used[i]=true;
            dfs(res,len,depth+1,path,used,nums);
            path.remove(nums[i]);
            used[i]=false;
            
        }
        return;
        
    }
  
}
